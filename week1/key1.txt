Week 1 Homework: Learning to use Emacs

1.1: Moving around in Emacs

1. opened emacs
2. C-s U T F - 8
3. C-s I n s t r u c t i o n s
4. C-s H T M L
5. C-s a r r o w
6. C-e
7. C-a
8. M-<
9. no
10. using C-s enables search/jump to quickly get to what is being looked for
11. C-x C-c

1.2: Deleting text in Emacs

1. opened emacs
2. C-s < ! - - Enter C-a C-k
3. C-s < ! - - Enter C-a C-k
4. C-s < ! - - Enter C-a C-k down C-k down C-k
5. C-s < ! - - Enter C-a C-k delete delete delete delete left left left delete
 delete delete 

1.3: Inserting text in Emacs

1. opened emacs 
2. M-% A s s i g n m e n t space 1 enter A s s i g n m e n t space 3 7 enter
space space enter
3. M-% U T F - 8 enter U S - A S C I I enter space enter
4. C-s < o l > enter enter

1.4: Other editing tasks in Emacs

1. entered command as specified by spec
2. opened emacs
3-4. M-> C-u 5 C-p C-space C-n M-w M-g g 3 4 0 enter C-y C-k up right delete M->
C-u 18 C-p C-space C-n C-n C-n M-w M-g g 3 0 1 enter C-y down down down delete
delete delete up right delete up right delete up right delete M-> C-u 27 C-p
C-space  C-n M-w M-g g 9 4 enter C-y delete up right delete M-> C-u 3 7 C-p
C-space  C-n C-n up right delete M-w M-g 1 8 enter C-y delete up right delete
5. M-> C-space C-u 4 3 C-p C-w 
6. C-x u
7. M-> - - > C-u 4 3 C-p C-a < ! - - enter
8. M-< M-% < o l > enter < O L > enter space space space space space space space
(Found seven instances of <ol>).

1.5: Doing commands in Emacs

1-2. C-x d enter + j u n k enter e C-x C-f h e l l o . c enter (typed code)
3. M-x c o m p i l e enter h e l l o enter
4. M-! . / h e l l o > h e l l o - o u t enter
5. 
#include <stdio.h>
int
main (void)
{
  char n = '\n';
  char b = '\\';
  char q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn';%c
  char b = '%c%c';%c  char q = '%c';%c  char const *p = %c%s%c;%c  printf (p,
  n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
  return 0;
}

1.6: Running Elisp code

1. opened scratch buffer from initial startup screen
2. ( r a n d o m ) C-j
3. ( s e t q space x space ( r a n d o m ) ) C-j ( s e t q space y space ( r a n
d o m ) ) C-j ( s e t q space z space ( r a n d o m ) ) C-j
4. (* space  x space y space z) C-j (the result is not the mathematically
correct result, seems to be the result of some sort of overflow)
5. M-: ( * space x space y space z ) (the first number is the same result as
that of part 4, but it is followed by two numbers in parantheses separated by a
comma)
6. Random integers can never be truly random since they have to be deterministic
to some extent for a computer to generate them. In other words, there is some
initial deterministic step (a choice/initial position) in the process of
generating random numbers.
